@page "/uploadPage"
@attribute [Authorize]

<h3>Upload File here:</h3>
<InputFile OnChange="@LoadFiles" class="form-control" accept=".png,.jpg,.jpeg, .pdf" />


@code {

    private CryptoService _cryptoService = new CryptoService();

    protected override async Task OnInitializedAsync()
    {

        if (await LocalStorage.GetItemAsync<string>("Base64SymKey") == null)
        {
            string token = await LocalStorage.GetItemAsync<string>("token");
            Http.DefaultRequestHeaders.Remove("Authorization");
            Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

            Dictionary<string, string> result = await Http.GetFromJsonAsync<Dictionary<string, string>>("api/File/dfParameters");

            if (result == null)
                Console.WriteLine("result is null");
            else
            {
                Dictionary<string, string> stringKeys = await _cryptoService.GenerateKeys(result);
                await LocalStorage.SetItemAsync("PublicKey", stringKeys["Public"]);
                await LocalStorage.SetItemAsync("PrivateKey", stringKeys["Private"]);
                await LocalStorage.SetItemAsync("Base64SymKey", stringKeys["SymKey"]);
                await LocalStorage.SetItemAsync("A", stringKeys["A"]);
                var res = await Http.PostAsJsonAsync("api/File/DFexchange", stringKeys["A"]);
                Console.WriteLine(res.Content.ToString());

            }
        }
    }

    private async Task<Dictionary<string, string>> GetFileParams(byte[] bytesFile, IBrowserFile file)
    {
        string base64File = Convert.ToBase64String(bytesFile);
        string base64KeyAndIv = await _cryptoService.GetHashInBase64(bytesFile, 512);
        string base64Key = await _cryptoService.ExtractKey(Convert.FromBase64String(base64KeyAndIv), 32);
        string base64Iv = await _cryptoService.ExtractIv(Convert.FromBase64String(base64KeyAndIv), 32, 16);
        string base64EncFile = await _cryptoService.GetEcnryptedFileBase64(base64Key, base64Iv, bytesFile);
        string TAG = await _cryptoService.GetHashInBase64(Convert.FromBase64String(base64EncFile), 256);
        string symKey = await LocalStorage.GetItemAsync<string>("Base64SymKey");
        Dictionary<string, string> fileParams = await _cryptoService.GetEncryptedFileParameters(TAG, base64Key, base64Iv, symKey, file.Name);

        fileParams.Add("base64EncFile", base64EncFile);

        return fileParams;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        var file = e.GetMultipleFiles().FirstOrDefault();
        long maxFileSize = 200000 * 1024 * 10;
        Stream streamFile;

        if (file != null)
        {
            streamFile = file.OpenReadStream(maxFileSize);

            byte[] buffer = new byte[1024];
            byte[] bytesFile = new byte[file.Size];

            int bytesRead;
            long totalBytesRead = 0;

            Console.WriteLine(file.Size);
            while ((bytesRead = await streamFile.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                try
                {
                    // buffer.CopyTo(bytesFile, totalBytesRead);
                    Array.Copy(buffer, 0, bytesFile, totalBytesRead, bytesRead);
                    totalBytesRead += bytesRead;
                }
                catch(Exception)
                {
                    Console.WriteLine(totalBytesRead);
                    Console.WriteLine(bytesFile.Length);
                }
            }
            streamFile.Close();

            Dictionary<string, string> fileParams = await GetFileParams(bytesFile, file);

            string token = await LocalStorage.GetItemAsync<string>("token");
            Http.DefaultRequestHeaders.Remove("Authorization");
            Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

            var result = await Http.PostAsJsonAsync("api/File/uploadFile", fileParams);
            if (result.IsSuccessStatusCode)
            {
                FileMetaChallenge? fmc = result.Content.ReadFromJsonAsync<FileMetaChallenge>().Result;
                if(fmc == null)
                    Console.WriteLine("E null\n");
               
                string symKey = await LocalStorage.GetItemAsync<string>("Base64SymKey");
                FileResp userResp = await _cryptoService.GetFileResp(fmc, fileParams["base64EncFile"], file.Name, symKey);

                var res = await Http.PostAsJsonAsync("api/File/verifyFileChallenge", userResp);
                if (res.IsSuccessStatusCode)
                {
                    Console.WriteLine("File uploaded successfully");
                }
                else
                {
                    Console.WriteLine("Error: " + res.StatusCode);
                }
                
            }
            else
            {
                Console.WriteLine("Error: " + result.StatusCode);
            }
        }
    }
}
